var io={adress:'',port:'',read:function(item){},write:function(item,val){io.send({'cmd':'item','id':item,'val':val});widget.update(item,val);},trigger:function(name,val){},init:function(address,port){io.address=address;io.port=port;io.open();setInterval(function(){if(!io.socket){io.open();console.log("Reconnect");}},60000);},run:function(realtime){if(io.socket.readyState>1){io.open();}
else{widget.refresh();io.monitor();}},version:'0.1',socket:null,open:function(){io.socket=new WebSocket('ws://'+io.address+':'+io.port+'/');io.socket.onopen=function(){io.send({'cmd':'proto','ver':io.version});io.monitor();notify.remove();};io.socket.onmessage=function(event){var item,val;var data=JSON.parse(event.data);console.log("[io.fhem] receiving data: "+event.data);switch(data.cmd){case'reloadPage':location.reload(true);break;case'item':for(var i=0;i<data.items.length;i=i+2){item=data.items[i];val=data.items[i+1];console.log("[io.fhem]: update item: "+item+" val: "+val);widget.update(item,val);};break;case'dialog':notify.info(data.header,data.content);case'proto':var proto=data.ver;if(proto!=io.version){notify.info('Driver: fhem','Protocol mismatch<br />Driver is at version v'+io.version+'<br />fhem is at version v'+proto);};case'log':break;};};io.socket.onerror=function(error){notify.error('Driver: fhem','Websocket error: '+error);};io.socket.onclose=function(){io.close();notify.add('ConnectionLost','warning',"Driver: fhem","Connection to the fhem server lost!");notify.display();};},send:function(data){if(io.socket.readyState==1){io.socket.send(unescape(encodeURIComponent(JSON.stringify(data))));console.log('[io.fhem] sending data: '+JSON.stringify(data));}},monitor:function(){if(widget.listeners().length){io.send({'cmd':'monitor','items':widget.listeners()});}},close:function(){io.socket.close();io.socket=null;}};